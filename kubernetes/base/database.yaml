
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  ports:
  - port: 27017
    targetPort: 27017
  #clusterIP: None
  selector:
    role: mongo
    
---

apiVersion: v1
kind: Service
metadata:
  name: mongo-0
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    role: mongo
    statefulset.kubernetes.io/pod-name: mongo-0 

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-1
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    role: mongo
    statefulset.kubernetes.io/pod-name: mongo-1

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-2
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    role: mongo
    statefulset.kubernetes.io/pod-name: mongo-2

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: "mongo"
  updateStrategy:
    type: RollingUpdate
  replicas: 2 
  selector:
    matchLabels:
      role: mongo
  template:
    metadata:
      labels:
        role: mongo
    spec:
      terminationGracePeriodSeconds: 60
      # prevent colocation of replicas
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values: 
                  - mongo
              topologyKey: kubernetes.io/hostname
      containers:
        - name: mongo
          image: mongo:4.2.3
          command:
            - mongod
            # - --config=/data/configdb/mongod.conf
            - --dbpath=/data/db
            - --replSet
            - rs0
            #- "--smallfiles"
            #- "--noprealloc"
            - "--bind_ip"
            - 0.0.0.0
          env:
            - name: MONGO_INITDB_DATABASE
              value: site
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: password
          ports:
            - containerPort: 27017
          livenessProbe:
            initialDelaySeconds: 900
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
          readinessProbe:
            initialDelaySeconds: 60
            exec:
              command:
                # - /usr/bin/mongo --quiet --eval 'rs.status()' | grep ok | cut -d ':' -f 2 | tr -dc '0-9' | awk '{ if($0=="0"){ exit 127 }else{ exit 0 } }'
                - mongo
                - --eval
                - "db.adminCommand('ping')"
                #- "rs.reconfig( rs.config(), {force:true})"
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
          resources:
            requests:
              cpu: 2
              memory: 8Gi
          #  - name: docker-initdb-config
          #    mountPath: /docker-entrypoint-initdb.d
        - name: telegraf
          image: docker.io/telegraf:1.13.2
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 500Mi
          env:
            - name: ENVIRONMENT
              value: dev
            - name: MONGODB_HOST
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MONITOR_HOST
              value: https://influxdb.slac.stanford.edu:443
            - name: MONITOR_DATABASE
              value: cryoem-logbook
          volumeMounts:
          - name: telegraf-config
            mountPath: /etc/telegraf
        #- name: mongo-sidecar
        #  image: cvallance/mongo-k8s-sidecar:latest
        #  env:
        #    - name: KUBERNETES_MONGO_SERVICE_NAME
        #      value: mongo
        #    - name: MONGO_SIDECAR_POD_LABELS
        #      value: "role=mongo"
      #volumes:
      #  - name: docker-initdb-config
      #    configMap:
      #      name: docker-initdb-config
      #      items:
      #      - key: 10_users.sh
      #        path: 10_users.sh
      #      - key: 20_site.js
      #        path: 20_site.js
      #      - key: 30_instruments.js
      #        path: 30_instruments.js
      #      - key: 40_experiments.sh
      #        path: 40_experiments.sh
      #      - key: 45_experiment_switch.js
      #        path: 45_experiment_switch.js
      #      - key: 50_site-roles.js
      #        path: 50_site-roles.js
        #- name: rs-check
        #  image: mongo:4.0
        #  command:
        #    - /bin/bash
        #    - -c 
        #    - "trap : TERM INT; sleep infinity & wait"
        #  readinessProbe:
        #    exec:
        #      command:
        #      - mongo
        #      - --quiet
        #      - --eval
        #      - "status=rs.status()['ok']; if(status>0){quit(0)}else{quit(127)};"
        #  - bash -c "while true; do /usr/bin/mongo --quiet --eval 'rs.status()' | grep ok | cut -d ':' -f 2 | tr -dc '0-9' | awk '/0/{ exit 127 }'; sleep 30; done"
        #
      volumes:
        - name: telegraf-config
          configMap:
            name: telegraf-mongodb
  volumeClaimTemplates: 
    - metadata:
        name: mongo-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: cryoem-logbook-prod--mongo
        resources:
          requests:
            storage: 20Gi

